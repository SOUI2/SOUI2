#pragma once
// Start of SOUI namespace section
namespace SOUI
{
    class SWindow;

/*!
\brief
    Base class used as the argument to all subscribers Event object.

    The base EventArgs class does not contain any useful information, it is intended
    to be specialised for each type of event that can be generated by objects within
    the system.  The use of this base class allows all event subscribers to have the
    same function signature.

    The \a handled field is used to signal whether an event was actually handled or not.  While
    the event system does not look at this value, code at a higher level can use it to determine
    how far to propagate an event.
*/
class EventArgs
{
public:
    /*************************************************************************
        Construction
    *************************************************************************/
    EventArgs(SWindow *pSender);
    
    virtual ~EventArgs(void) {}
    virtual UINT GetEventID()= 0;
    
    /*************************************************************************
        Data members
    *************************************************************************/
    //! handlers should increment this if they handled the event.
    UINT handled;
    
    int  idFrom;
    LPCWSTR nameFrom;
    
    SWindow *sender;
};

class EventCmnArgs : public EventArgs
{
public:
    EventCmnArgs(SWindow *pSender,UINT uEvtID):EventArgs(pSender),uID(uEvtID)
    {
    
    }
    virtual UINT GetEventID(){return uID;}

protected:
    UINT uID;
};

enum SOUI_EVENTS
{
    EVT_INTERNAL_FIRST=10,
    EVT_REALWND_CREATE,
    EVT_REALWND_INIT,
    EVT_REALWND_DESTROY,
    EVT_REALWND_SIZE,

    EVT_INTERNAL_LAST=1000,
    
    EVT_CMD=10000,
    EVT_CTXMENU,
    EVT_SCROLL,
    EVT_OFEVENT,    //消息二次包装
    EVT_OFPANEL,    //一个itemPanel中的消息的二次包装
    
    EVT_TAB_SELCHANGING=11000,
    EVT_TAB_SELCHANGED,
    
    EVT_LB_GETDISPINFO=12000,
    EVT_LB_SELCHANGING,
    EVT_LB_SELCHANGED,
    
    EVT_LC_SELCHANGING=13000,
    EVT_LC_SELCHANGED,
    
    EVT_TB_GETDISPINFO=14000,    
    EVT_TB_SELCHANGING,
    EVT_TB_SELCHANGED,
    
    EVT_TC_SELCHANGING=15000,
    EVT_TC_SELCHANGED,
    EVT_TC_EXPAND,
    EVT_TC_CHECKSTATE,
    
    EVT_RE_NOTIFY=16000,
    
    EVT_SLIDER_POS=17000,
    
    EVT_HEADER_CLICK=18000,
    EVT_HEADER_ITEMCHANGING,
    EVT_HEADER_ITEMCHANGED,
    EVT_HEADER_ITEMSWAP,

    EVT_CB_SELCHANGE=19000,
    
    EVT_CALENDAR_SELDAY=20000,
    
    EVT_EXTERNAL_BEGIN=10000000,
};

class EventRealWndCreate : public EventArgs
{
public:
    EventRealWndCreate(SWindow *pWnd):EventArgs(pWnd),hWndCreated(NULL){}
    enum{EventID=EVT_REALWND_CREATE};
    virtual UINT GetEventID(){return EventID;}
    HWND hWndCreated;   //创建出来的窗口句柄
};

class EventRealWndInit : public EventArgs
{
public:
    EventRealWndInit(SWindow *pWnd):EventArgs(pWnd),bSetFocus(FALSE){}
    enum{EventID=EVT_REALWND_INIT};
    virtual UINT GetEventID(){return EventID;}
    BOOL bSetFocus;
};


class EventCmd : public EventArgs
{
public:
    EventCmd(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_CMD};
    virtual UINT GetEventID(){return EventID;}
};

class EventCtxMenu : public EventArgs
{
public:
    EventCtxMenu(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_CTXMENU};
    virtual UINT GetEventID(){return EventID;}
    POINT           pt;
};


class EventScroll : public EventArgs
{
public:
    EventScroll(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_SCROLL};
    virtual UINT GetEventID(){return EventID;}
    UINT        uSbCode;
    int         nPos;
    BOOL        bVertical;
};

class EventOfEvent : public EventArgs
{
public:
    EventOfEvent(SWindow *pWnd,EventArgs *_pOrgEvt)
    :EventArgs(pWnd)
    ,pOrgEvt(_pOrgEvt)
    {}
    enum{EventID=EVT_OFEVENT};
    virtual UINT GetEventID(){return EventID;}
    EventArgs * pOrgEvt;
};

class SItemPanel;
class EventOfPanel : public EventArgs
{
public:
    EventOfPanel(SItemPanel *_pPanel,EventArgs *_pOrgEvt);
    enum{EventID=EVT_OFEVENT};
    virtual UINT GetEventID(){return EventID;}
    
    SItemPanel *pPanel;
    EventArgs * pOrgEvt;
};

class EventTabSelChanging : public EventArgs
{
public:
    EventTabSelChanging(SWindow *pWnd):EventArgs(pWnd),bCancel(FALSE){}
    enum{EventID=EVT_TAB_SELCHANGING};
    virtual UINT GetEventID(){return EventID;}
    UINT        uOldSel;
    UINT        uNewSel;
    BOOL        bCancel;
};

class EventTabSelChanged : public EventArgs
{
public:
    EventTabSelChanged(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_TAB_SELCHANGED};
    virtual UINT GetEventID(){return EventID;}
    UINT        uOldSel;
    UINT        uNewSel;
};

class EventLBGetDispInfo : public EventArgs
{
public:
    EventLBGetDispInfo(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_LB_GETDISPINFO};
    virtual UINT GetEventID(){return EventID;}
    int  iItem;
    SWindow * pItem;
    BOOL bSel;
    BOOL bHover;
};

class EventLBSelChanging : public EventArgs
{
public:
    EventLBSelChanging(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_LB_SELCHANGING};
    virtual UINT GetEventID(){return EventID;}
    int nNewSel;
    int nOldSel;
    BOOL bCancel;
};

class EventLBSelChanged : public EventArgs
{
public:
    EventLBSelChanged(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_LB_SELCHANGED};
    virtual UINT GetEventID(){return EventID;}
    int nNewSel;
    int nOldSel;
};

class EventTBGetDispInfo : public EventArgs
{
public:
    EventTBGetDispInfo(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_TB_GETDISPINFO};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM  hItem;
    SWindow     *pItemWnd;
    BOOL        bSel;
    BOOL        bHover;
};

class EventTBSelChanging: public EventArgs
{
public:
    EventTBSelChanging(SWindow *pWnd):EventArgs(pWnd),bCancel(FALSE){}
    enum{EventID=EVT_TB_SELCHANGING};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM hNewSel;
    HSTREEITEM hOldSel;
    BOOL        bCancel;
};

class EventTBSelChanged: public EventArgs
{
public:
    EventTBSelChanged(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_TB_SELCHANGED};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM hNewSel;
    HSTREEITEM hOldSel;
};

class EventRENotify : public EventArgs
{
public:
    EventRENotify(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_RE_NOTIFY};
    virtual UINT GetEventID(){return EventID;}
    DWORD iNotify;
    LPVOID pv;
};

class EventSliderPos : public EventArgs
{
public:
    EventSliderPos(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_SLIDER_POS};
    virtual UINT GetEventID(){return EventID;}
    int     nPos;
};

//点击表头
class EventHeaderClick : public EventArgs
{
public:
    EventHeaderClick(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_HEADER_CLICK};
    virtual UINT GetEventID(){return EventID;}
    int   iItem;
};

//点击表头
class EventHeaderItemChanging : public EventArgs
{
public:
    EventHeaderItemChanging(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_HEADER_ITEMCHANGING};
    virtual UINT GetEventID(){return EventID;}
    int   iItem;
    int   nWidth;
};

//点击表头
class EventHeaderItemChanged : public EventArgs
{
public:
    EventHeaderItemChanged(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_HEADER_ITEMCHANGED};
    virtual UINT GetEventID(){return EventID;}
    int   iItem;
    int   nWidth;
};

//拖动表项调整位置
class EventHeaderItemSwap : public EventArgs
{
public:
    EventHeaderItemSwap(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_HEADER_ITEMSWAP};
    virtual UINT GetEventID(){return EventID;}
    int   iOldIndex;
    int      iNewIndex;
};

class EventCBSelChange : public EventArgs
{
public:
    EventCBSelChange(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_CB_SELCHANGE};
    virtual UINT GetEventID(){return EventID;}
};

class EventLCSelChanging : public EventArgs
{
public:
    EventLCSelChanging(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_LC_SELCHANGING};
    virtual UINT GetEventID(){return EventID;}
    int nNewSel;
    int nOldSel;
    BOOL bCancel;
};

class EventLCSelChanged : public EventArgs
{
public:
    EventLCSelChanged(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_LC_SELCHANGED};
    virtual UINT GetEventID(){return EventID;}
    int nNewSel;
    int nOldSel;
};

class EventCalendarSelDay : public EventArgs
{
public:
    EventCalendarSelDay(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_CALENDAR_SELDAY};
    virtual UINT GetEventID(){return EventID;}
    WORD   wOldDay;
    WORD   wNewDay;
};


class EventTCSelChanging : public EventArgs
{
public:
    EventTCSelChanging(SWindow *pWnd):EventArgs(pWnd),bCancel(FALSE){}
    enum{EventID=EVT_TC_SELCHANGING};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM hOldSel;
    HSTREEITEM hNewSel;
    BOOL bCancel;
};

class EventTCSelChanged : public EventArgs
{
public:
    EventTCSelChanged(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_TC_SELCHANGED};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM hOldSel;
    HSTREEITEM hNewSel;
};

class EventTCCheckState : public EventArgs
{
public:
    EventTCCheckState(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_TC_CHECKSTATE};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM  hItem;
    UINT        uCheckState;
};

class EventTCExpand : public EventArgs
{
public:
    EventTCExpand(SWindow *pWnd):EventArgs(pWnd){}
    enum{EventID=EVT_TC_EXPAND};
    virtual UINT GetEventID(){return EventID;}
    HSTREEITEM  hItem;
    BOOL bCollapsed;
};

} // End of  CEGUI namespace section