/**
* Copyright (C) 2014-2050 
* All rights reserved.
* 
* @file       Events.h
* @brief      
* @version    v1.0      
* @author     SOUI group   
* @date       2014/08/02
* 
* Describe    SOUI系统中使用的事件系统
*/

#pragma once

#include "core/Sobject.h"

namespace SOUI
{
    class SWindow;
    enum SOUI_EVENTS
    {
        EVT_MOUSE_HOVER=9000,//两个窗口鼠标状态事件
        EVT_MOUSE_LEAVE,

        EVT_CMD=10000,
        EVT_CTXMENU,
        EVT_SETFOCUS,
        EVT_KILLFOCUS,
        EVT_DESTROY,
        EVT_VISIBLECHANGED,
        EVT_STATECHANGED,

        //增加两个滚动VIEW的事件
        EVT_SCROLLVIEW_ORIGINCHANGED,
        EVT_SCROLLVIEW_SIZECHANGED,

        EVT_SCROLL,
        EVT_OFEVENT,    //消息二次包装
        EVT_OFPANEL,    //一个itemPanel中的消息的二次包装

        //增加3个itempanel相关的事件,经过EVT_OFPANEL到达应用层
        EVT_ITEMPANEL_CLICK,
        EVT_ITEMPANEL_DBCLICK,
        EVT_ITEMPANEL_RCLICK,

        EVT_TAB_SELCHANGING=11000,
        EVT_TAB_SELCHANGED,
        EVT_TAB_ITEMHOVER,
        EVT_TAB_ITEMLEAVE,

        EVT_LB_GETDISPINFO=12000,
        EVT_LB_SELCHANGING,
        EVT_LB_SELCHANGED,

        EVT_LC_SELCHANGING=13000,
        EVT_LC_SELCHANGED,
        EVT_LC_ITEMDELETED,

        EVT_TB_GETDISPINFO=14000,    
        EVT_TB_SELCHANGING,
        EVT_TB_SELCHANGED,
        EVT_TB_QUERYITEMHEIGHT,

        EVT_TC_SELCHANGING=15000,
        EVT_TC_SELCHANGED,
        EVT_TC_EXPAND,
        EVT_TC_CHECKSTATE,
        EVT_TC_DBCLICK,    //treectrl的叶子节点双击事件, add by zhaosheng

        EVT_RE_NOTIFY=16000,

        EVT_SLIDER_POS=17000,

        EVT_HEADER_CLICK=18000,
        EVT_HEADER_ITEMCHANGING,
        EVT_HEADER_ITEMCHANGED,
        EVT_HEADER_ITEMSWAP,

        EVT_CB_SELCHANGE=19000,
        EVT_CBE_OFITEM=19500,

        EVT_CALENDAR_SELDAY=20000,

        EVT_EXTERNAL_BEGIN=10000000,
    };


    /*!
    \brief
    Base class used as the argument to all subscribers Event object.

    The base EventArgs class does not contain any useful information, it is intended
    to be specialised for each type of event that can be generated by objects within
    the system.  The use of this base class allows all event subscribers to have the
    same function signature.

    The \a handled field is used to signal whether an event was actually handled or not.  While
    the event system does not look at this value, code at a higher level can use it to determine
    how far to propagate an event.
    */
    class SOUI_EXP EventArgs
    {
    public:
        /*************************************************************************
        Construction
        *************************************************************************/
        EventArgs( SObject *pSender ) 
            : handled(0)
            , sender(pSender)
        {
            idFrom = pSender->GetID();
            nameFrom = pSender->GetName();
        }

        virtual ~EventArgs(void) {}
        virtual UINT GetEventID()= 0;
        virtual LPCSTR GetScriptHandler() const {return NULL;}
        /*************************************************************************
        Data members
        *************************************************************************/
        
        UINT handled; /**< handlers should increment this if they handled the event. */

        int  idFrom; /**< 事件发送者ID */
        LPCWSTR nameFrom; /**< 事件发送者name */
        
        SObject *sender;  /**< 产生事件的原始SOUI对象，可能和idFrom and nameFrom指定的对象不同 */
    };
    

    /*!
    \brief 一个事件对象的模板类，用来实现EventArgs两个虚函数
    */
    template<class T>
    class TplEventArgs : public EventArgs
    {
    public:
        TplEventArgs(SObject *pSender):EventArgs(pSender)
        {
        }

        virtual UINT GetEventID(){return T::EventID;}
        virtual LPCSTR GetScriptHandler() const {return T::ScriptHandler();}
    };
    class SOUI_EXP EventCmnArgs : public EventArgs
    {
    public:
        EventCmnArgs(SObject *pSender,UINT uEvtID):EventArgs(pSender),uID(uEvtID)
        {

        }
        virtual UINT GetEventID(){return uID;}

    protected:
        UINT uID;
    };

    #define EVENTID(x) x::EventID,x::ScriptHandler()

    class SOUI_EXP EventSwndDestroy : public TplEventArgs<EventSwndDestroy>
    {
    public:
        EventSwndDestroy(SObject *pSender):TplEventArgs<EventSwndDestroy>(pSender){}
        enum{EventID=EVT_DESTROY};
        static LPCSTR ScriptHandler(){return "on_destroy";}
    };

    class SOUI_EXP EventSwndStateChanged : public TplEventArgs<EventSwndStateChanged>
    {
    public:
        EventSwndStateChanged(SObject *pSender):TplEventArgs<EventSwndStateChanged>(pSender){}
        enum{EventID=EVT_STATECHANGED};
        static LPCSTR ScriptHandler(){return "on_state_changed";}
    };

    class SOUI_EXP EventSwndVisibleChanged : public TplEventArgs<EventSwndVisibleChanged>
    {
    public:
        EventSwndVisibleChanged(SObject *pSender):TplEventArgs<EventSwndVisibleChanged>(pSender){}
        enum{EventID=EVT_VISIBLECHANGED};
        static LPCSTR ScriptHandler(){return "on_visible_changed";}
    };

    class SOUI_EXP EventSwndMouseLeave : public TplEventArgs<EventSwndMouseLeave>
    {
    public:
        EventSwndMouseLeave(SObject *pSender):TplEventArgs<EventSwndMouseLeave>(pSender){}
        enum{EventID=EVT_MOUSE_LEAVE};
        static LPCSTR ScriptHandler(){return "on_mouse_leave";}
    };

    class SOUI_EXP EventSwndMouseHover : public TplEventArgs<EventSwndMouseHover>
    {
    public:
        EventSwndMouseHover(SObject *pSender):TplEventArgs<EventSwndMouseHover>(pSender){}
        enum{EventID=EVT_MOUSE_HOVER};
        static LPCSTR ScriptHandler(){return "on_mouse_hover";}
    };

    class SOUI_EXP EventItemPanelRclick : public TplEventArgs<EventItemPanelRclick>
    {
    public:
        EventItemPanelRclick(SObject *pSender):TplEventArgs<EventItemPanelRclick>(pSender){}
        enum{EventID=EVT_ITEMPANEL_RCLICK};
        static LPCSTR ScriptHandler(){return "on_itemparem_rclick";}
    };

    class SOUI_EXP EventItemPanelDbclick : public TplEventArgs<EventItemPanelDbclick>
    {
    public:
        EventItemPanelDbclick(SObject *pSender):TplEventArgs<EventItemPanelDbclick>(pSender){}
        enum{EventID=EVT_ITEMPANEL_DBCLICK};
        static LPCSTR ScriptHandler(){return "on_itempanel_dbclick";}
    };

    class SOUI_EXP EventItemPanelClick : public TplEventArgs<EventItemPanelClick>
    {
    public:
        EventItemPanelClick(SObject *pSender):TplEventArgs<EventItemPanelClick>(pSender){}
        enum{EventID=EVT_ITEMPANEL_CLICK};
        static LPCSTR ScriptHandler(){return "on_itempanel_click";}
    };

    class SOUI_EXP EventCmd : public TplEventArgs<EventCmd>
    {
    public:
        EventCmd(SObject *pSender):TplEventArgs<EventCmd>(pSender){}
        enum{EventID=EVT_CMD};
        static LPCSTR ScriptHandler(){return "on_command";}
    };

    class SOUI_EXP EventCtxMenu : public TplEventArgs<EventCtxMenu>
    {
    public:
        EventCtxMenu(SObject *pSender):TplEventArgs<EventCtxMenu>(pSender),bCancel(FALSE){}
        enum{EventID=EVT_CTXMENU};
        static LPCSTR ScriptHandler(){return "on_conext_menu";}
        POINT           pt;
        BOOL            bCancel;
    };

    class SOUI_EXP EventSetFocus : public TplEventArgs<EventSetFocus>
    {
    public:
        EventSetFocus(SObject *pSender):TplEventArgs<EventSetFocus>(pSender){}
        enum{EventID=EVT_SETFOCUS};
        static LPCSTR ScriptHandler(){return "on_set_focus";}
    };

    class SOUI_EXP EventKillFocus : public TplEventArgs<EventKillFocus>
    {
    public:
        EventKillFocus(SObject *pSender):TplEventArgs<EventKillFocus>(pSender){}
        enum{EventID=EVT_KILLFOCUS};
        static LPCSTR ScriptHandler(){return "on_kill_focus";}
    };
    
    class SOUI_EXP EventStateChanged : public TplEventArgs<EventStateChanged>
    {
    public:
        EventStateChanged(SObject *pSender):TplEventArgs<EventStateChanged>(pSender){}
        enum{EventID=EVT_STATECHANGED};
        static LPCSTR ScriptHandler(){return "on_state_changed";}

        DWORD dwOldState;
        DWORD dwNewState;
    };
    
    class SOUI_EXP EventScrollViewOriginChanged : public TplEventArgs<EventScrollViewOriginChanged>
    {
    public:
        EventScrollViewOriginChanged(SObject *pSender):TplEventArgs<EventScrollViewOriginChanged>(pSender){}
        enum{EventID=EVT_SCROLLVIEW_ORIGINCHANGED};
        static LPCSTR ScriptHandler(){return "on_scrollview_origin_changed";}

        CPoint ptOldOrigin;
        CPoint ptNewOrigin;
    };

    class SOUI_EXP EventScrollViewSizeChanged : public TplEventArgs<EventScrollViewSizeChanged>
    {
    public:
        EventScrollViewSizeChanged(SObject *pSender):TplEventArgs<EventScrollViewSizeChanged>(pSender){}
        enum{EventID=EVT_SCROLLVIEW_SIZECHANGED};
        static LPCSTR ScriptHandler(){return "on_scrollview_size_changed";}

        CSize szOldViewSize;
        CSize szNewViewSize;
    };

    class SOUI_EXP EventScroll : public TplEventArgs<EventScroll>
    {
    public:
        EventScroll(SObject *pSender):TplEventArgs<EventScroll>(pSender){}
        enum{EventID=EVT_SCROLL};
        static LPCSTR ScriptHandler(){return "on_scroll";}
        UINT        uSbCode;
        int         nPos;
        BOOL        bVertical;
    };

    class SOUI_EXP EventOfEvent : public TplEventArgs<EventOfEvent>
    {
    public:
        EventOfEvent(SObject *pSender,EventArgs *_pOrgEvt)
            :TplEventArgs<EventOfEvent>(pSender)
            ,pOrgEvt(_pOrgEvt)
        {}
        enum{EventID=EVT_OFEVENT};
        static LPCSTR ScriptHandler(){return "on_event_of_event";}
        EventArgs * pOrgEvt;
    };

    class SItemPanel;
    class SOUI_EXP EventOfPanel : public TplEventArgs<EventOfPanel>
    {
    public:
        EventOfPanel(SItemPanel *_pPanel,EventArgs *_pOrgEvt);
        enum{EventID=EVT_OFPANEL};
        static LPCSTR ScriptHandler(){return "on_event_of_panel";}

        SItemPanel *pPanel;
        EventArgs * pOrgEvt;
    };
    
    class SOUI_EXP EventOfComoboxExItem : public TplEventArgs<EventOfComoboxExItem>
    {
    public:
        EventOfComoboxExItem(SObject *pSender,EventCmd *_pOrgEvt )
            :TplEventArgs<EventOfComoboxExItem>(pSender)
            ,pOrgEvt(_pOrgEvt)
            ,bCancel(FALSE)
        {

        }

        enum{EventID=EVT_CBE_OFITEM};
        static LPCSTR ScriptHandler(){return "on_event_of_comboxex_item";}

        EventCmd    *  pOrgEvt;
        BOOL           bCancel;
    };
    
    class SOUI_EXP EventTabSelChanging : public TplEventArgs<EventTabSelChanging>
    {
    public:
        EventTabSelChanging(SObject *pSender):TplEventArgs<EventTabSelChanging>(pSender),bCancel(FALSE){}
        enum{EventID=EVT_TAB_SELCHANGING};
        static LPCSTR ScriptHandler(){return "on_tab_sel_changing";}
        UINT        uOldSel;
        UINT        uNewSel;
        BOOL        bCancel;
    };

    class SOUI_EXP EventTabSelChanged : public TplEventArgs<EventTabSelChanged>
    {
    public:
        EventTabSelChanged(SObject *pSender):TplEventArgs<EventTabSelChanged>(pSender){}
        enum{EventID=EVT_TAB_SELCHANGED};
        static LPCSTR ScriptHandler(){return "on_tab_sel_changed";}
        UINT        uOldSel;
        UINT        uNewSel;
    };

    class SOUI_EXP EventTabItemHover : public TplEventArgs<EventTabItemHover>
    {
    public:
        EventTabItemHover(SObject *pSender):TplEventArgs<EventTabItemHover>(pSender){}
        enum{EventID=EVT_TAB_ITEMHOVER};
        static LPCSTR ScriptHandler(){return "on_tab_item_hover";}
        int iHover;
    };

    class SOUI_EXP EventTabItemLeave : public TplEventArgs<EventTabItemLeave>
    {
    public:
        EventTabItemLeave(SObject *pSender):TplEventArgs<EventTabItemLeave>(pSender){}
        enum{EventID=EVT_TAB_ITEMLEAVE};
        static LPCSTR ScriptHandler(){return "on_tab_item_leave";}
        int iLeave;
    };

    class SOUI_EXP EventLBGetDispInfo : public TplEventArgs<EventLBGetDispInfo>
    {
    public:
        EventLBGetDispInfo(SObject *pSender):TplEventArgs<EventLBGetDispInfo>(pSender){}
        enum{EventID=EVT_LB_GETDISPINFO};
        static LPCSTR ScriptHandler(){return "on_listbox_get_display_info";}
        int  iItem;
        SWindow * pItem;
        BOOL bSel;
        BOOL bHover;
    };

    class SOUI_EXP EventLBSelChanging : public TplEventArgs<EventLBSelChanging>
    {
    public:
        EventLBSelChanging(SObject *pSender):TplEventArgs<EventLBSelChanging>(pSender),bCancel(FALSE){
        
        }
        enum{EventID=EVT_LB_SELCHANGING};
        static LPCSTR ScriptHandler(){return "on_listbox_sel_changing";}

        int nNewSel;
        int nOldSel;
        BOOL bCancel;
    };

    class SOUI_EXP EventLBSelChanged : public TplEventArgs<EventLBSelChanged>
    {
    public:
        EventLBSelChanged(SObject *pSender):TplEventArgs<EventLBSelChanged>(pSender){}
        enum{EventID=EVT_LB_SELCHANGED};
        static LPCSTR ScriptHandler(){return "on_listbox_sel_changed";}
        int nNewSel;
        int nOldSel;
    };

    class SOUI_EXP EventTBGetDispInfo : public TplEventArgs<EventTBGetDispInfo>
    {
    public:
        EventTBGetDispInfo(SObject *pSender):TplEventArgs<EventTBGetDispInfo>(pSender){}
        enum{EventID=EVT_TB_GETDISPINFO};
        static LPCSTR ScriptHandler(){return "on_treebox_get_display_info";}
        HSTREEITEM  hItem;
        SWindow     *pItemWnd;
        BOOL        bSel;
        BOOL        bHover;
    };

    class SOUI_EXP EventTBSelChanging: public TplEventArgs<EventTBSelChanging>
    {
    public:
        EventTBSelChanging(SObject *pSender):TplEventArgs<EventTBSelChanging>(pSender),bCancel(FALSE){}
        enum{EventID=EVT_TB_SELCHANGING};
        static LPCSTR ScriptHandler(){return "on_treebox_sel_changing";}
        HSTREEITEM hNewSel;
        HSTREEITEM hOldSel;
        BOOL        bCancel;
    };

    class SOUI_EXP EventTBSelChanged: public TplEventArgs<EventTBSelChanged>
    {
    public:
        EventTBSelChanged(SObject *pSender):TplEventArgs<EventTBSelChanged>(pSender){}
        enum{EventID=EVT_TB_SELCHANGED};
        static LPCSTR ScriptHandler(){return "on_treebox_sel_changed";}
        HSTREEITEM hNewSel;
        HSTREEITEM hOldSel;
    };
    
    class SOUI_EXP EventTBQueryItemHeight : public TplEventArgs<EventTBQueryItemHeight>
    {
    public:
        EventTBQueryItemHeight(SObject *pSender):TplEventArgs<EventTBQueryItemHeight>(pSender){}
        enum{EventID=EVT_TB_QUERYITEMHEIGHT};
        static LPCSTR ScriptHandler(){return "on_treebox_query_item_height";}
        HSTREEITEM hItem;
        DWORD      dwState;    //状态,和SWindow::GetState的值一致
        int        nItemHeight;//返回值保存到这里
    };

    class SOUI_EXP EventRENotify : public TplEventArgs<EventRENotify>
    {
    public:
        EventRENotify(SObject *pSender):TplEventArgs<EventRENotify>(pSender){}
        enum{EventID=EVT_RE_NOTIFY};
        static LPCSTR ScriptHandler(){return "on_richedit_notify";}
        DWORD iNotify;
        LPVOID pv;
        HRESULT hr;
    };

    class SOUI_EXP EventSliderPos : public TplEventArgs<EventSliderPos>
    {
    public:
        EventSliderPos(SObject *pSender):TplEventArgs<EventSliderPos>(pSender){}
        enum{EventID=EVT_SLIDER_POS};
        static LPCSTR ScriptHandler(){return "on_slider_pos";}
        int     nPos;
    };

    //点击表头
    class SOUI_EXP EventHeaderClick : public TplEventArgs<EventHeaderClick>
    {
    public:
        EventHeaderClick(SObject *pSender):TplEventArgs<EventHeaderClick>(pSender){}
        enum{EventID=EVT_HEADER_CLICK};
        static LPCSTR ScriptHandler(){return "on_header_click";}
        int   iItem;
    };

    //点击表头
    class SOUI_EXP EventHeaderItemChanging : public TplEventArgs<EventHeaderItemChanging>
    {
    public:
        EventHeaderItemChanging(SObject *pSender):TplEventArgs<EventHeaderItemChanging>(pSender){}
        enum{EventID=EVT_HEADER_ITEMCHANGING};
        static LPCSTR ScriptHandler(){return "on_header_item_changing";}
        int   iItem;
        int   nWidth;
    };

    //点击表头
    class SOUI_EXP EventHeaderItemChanged : public TplEventArgs<EventHeaderItemChanged>
    {
    public:
        EventHeaderItemChanged(SObject *pSender):TplEventArgs<EventHeaderItemChanged>(pSender){}
        enum{EventID=EVT_HEADER_ITEMCHANGED};
        static LPCSTR ScriptHandler(){return "on_header_item_changed";}
        int   iItem;
        int   nWidth;
    };

    //拖动表项调整位置
    class SOUI_EXP EventHeaderItemSwap : public TplEventArgs<EventHeaderItemSwap>
    {
    public:
        EventHeaderItemSwap(SObject *pSender):TplEventArgs<EventHeaderItemSwap>(pSender){}
        enum{EventID=EVT_HEADER_ITEMSWAP};
        static LPCSTR ScriptHandler(){return "on_header_item_swap";}
        int   iOldIndex;
        int      iNewIndex;
    };

    class SOUI_EXP EventCBSelChange : public TplEventArgs<EventCBSelChange>
    {
    public:
        EventCBSelChange(SObject *pSender,int _nCurSel):TplEventArgs<EventCBSelChange>(pSender),nCurSel(_nCurSel){}
        enum{EventID=EVT_CB_SELCHANGE};
        static LPCSTR ScriptHandler(){return "on_combobox_sel_change";}
        int nCurSel;
    };

    class SOUI_EXP EventLCSelChanging : public TplEventArgs<EventLCSelChanging>
    {
    public:
        EventLCSelChanging(SObject *pSender):TplEventArgs<EventLCSelChanging>(pSender),bCancel(FALSE){}
        enum{EventID=EVT_LC_SELCHANGING};
        static LPCSTR ScriptHandler(){return "on_listctrl_sel_changing";}
        int nNewSel;
        int nOldSel;
        BOOL bCancel;
    };

    class SOUI_EXP EventLCSelChanged : public TplEventArgs<EventLCSelChanged>
    {
    public:
        EventLCSelChanged(SObject *pSender):TplEventArgs<EventLCSelChanged>(pSender){}
        enum{EventID=EVT_LC_SELCHANGED};
        static LPCSTR ScriptHandler(){return "on_listctrl_sel_changed";}
        int nNewSel;
        int nOldSel;
    };

	class SOUI_EXP EventLCItemDeleted : public TplEventArgs<EventLCItemDeleted>
	{
	public:
		EventLCItemDeleted(SObject *pSender) :TplEventArgs<EventLCItemDeleted>(pSender){}
		enum{ EventID = EVT_LC_ITEMDELETED };
        static LPCSTR ScriptHandler(){return "on_listctrl_del_item";}
		int		nItem;
		DWORD   dwData;
	};

    class SOUI_EXP EventCalendarSelDay : public TplEventArgs<EventCalendarSelDay>
    {
    public:
        EventCalendarSelDay(SObject *pSender):TplEventArgs<EventCalendarSelDay>(pSender){}
        enum{EventID=EVT_CALENDAR_SELDAY};
        static LPCSTR ScriptHandler(){return "on_calendar_sel_day";}
        WORD   wOldDay;
        WORD   wNewDay;
    };


    class SOUI_EXP EventTCSelChanging : public TplEventArgs<EventTCSelChanging>
    {
    public:
        EventTCSelChanging(SObject *pSender):TplEventArgs<EventTCSelChanging>(pSender),bCancel(FALSE){}
        enum{EventID=EVT_TC_SELCHANGING};
        static LPCSTR ScriptHandler(){return "on_treectrl_sel_changing";}
        HSTREEITEM hOldSel;
        HSTREEITEM hNewSel;
        BOOL bCancel;
    };

    class SOUI_EXP EventTCSelChanged : public TplEventArgs<EventTCSelChanged>
    {
    public:
        EventTCSelChanged(SObject *pSender):TplEventArgs<EventTCSelChanged>(pSender){}
        enum{EventID=EVT_TC_SELCHANGED};
        static LPCSTR ScriptHandler(){return "on_treectrl_sel_changed";}
        HSTREEITEM hOldSel;
        HSTREEITEM hNewSel;
    };

    class SOUI_EXP EventTCCheckState : public TplEventArgs<EventTCCheckState>
    {
    public:
        EventTCCheckState(SObject *pSender):TplEventArgs<EventTCCheckState>(pSender){}
        enum{EventID=EVT_TC_CHECKSTATE};
        static LPCSTR ScriptHandler(){return "on_treectrl_item_check";}
        HSTREEITEM  hItem;
        UINT        uCheckState;
    };

    class SOUI_EXP EventTCExpand : public TplEventArgs<EventTCExpand>
    {
    public:
        EventTCExpand(SObject *pSender):TplEventArgs<EventTCExpand>(pSender){}
        enum{EventID=EVT_TC_EXPAND};
        static LPCSTR ScriptHandler(){return "on_treectrl_item_expand";}
        HSTREEITEM  hItem;
        BOOL bCollapsed;
    };

    //双击treectrl的叶子节点 add by zhaosheng
    class SOUI_EXP EventTCDbClick : public TplEventArgs<EventTCDbClick>
    {
    public:
        EventTCDbClick(SObject *pSender):TplEventArgs<EventTCDbClick>(pSender){}
        enum{EventID=EVT_TC_DBCLICK};
        static LPCSTR ScriptHandler(){return "on_treectrl_item_dbclick";}
        HSTREEITEM hItem;  //双击选中的节点
    };

} // End of  CEGUI namespace section